import copy
import pygame
import numpy as np

class Grid:

	def __init__(self):
		self.grid = np.zeros((24, 10), dtype=np.int8)
		self.blocks = []
	
	def add_blocks(self, blocks):
		self.blocks = self.blocks + blocks

	def collided(self, shape): #checks for collision between a shape and a list of blocks
		collide = -1
				
		for b in shape.blocks:  #check for top/bottom collisions
			new_rect = b.move(0, 1)
			collide = max(collide, new_rect.collidelist(self.blocks))
		
		return collide > -1
			

	def is_valid(self, direction, shape): #checks a shape against the current blocks to see if movement is legal 
		collide = -1
		
		if self.blocks == []:
			return True
		
		
		if direction == 'right':
			for b in shape.blocks:
				new_rect = b.move(30, 30)
				collide = max(collide, new_rect.collidelist(self.blocks))
			return collide == -1
		
		if direction == 'left':
			for b in shape.blocks:
				new_rect = b.move(-30, 30)
				collide = max(collide, new_rect.collidelist(self.blocks))
			return collide == -1

	def row_check(self):
		rows = [] #checks y-coors of blocks and returns rows that should be cleared
		y_coors = [b[1] for b in self.blocks]
		unique_coors = set(y_coors)
		for u in unique_coors:
			if y_coors.count(u) == 10:
				rows.append(u)
		return rows

	def clear_rows(self, rows): #delete rows
		copy_blocks = copy.copy(self.blocks)
		for r in rows:
			for b in copy_blocks:
				if b[1] == r:
					blocks.remove(b)

	def move_down(self, rows): #called before clear rows
		for r in rows:
			for b in self.blocks:
				if b[1] < r:
					b[1] += 30

	
